{"version":3,"sources":["index.js"],"names":["window","addEventListener","canvas","document","getElementById","engine","Engine","scene","Scene","clearColor","BABYLON","Color4","spotLight","SpotLight","Vector3","Math","PI","intensity","range","directionalLight","DirectionalLight","diffuse","Color3","camera","FreeCamera","setTarget","Zero","attachControl","useAutoRotationBehavior","allowUpsideDown","activeCamera","alpha","SceneLoader","Append","newMeshes","createDefaultCameraOrLight","HemisphericLight","meshes","scaling","scaleInPlace","gltfMesh","boundingBox","BoundingBoxGizmo","MakeNotPickableAndWrapInBoundingBox","utilLayer","UtilityLayerRenderer","utilityLayerScene","autoClearDepthAndStencil","FromHexString","sixDofDragBehavior","SixDofDragBehavior","addBehavior","multiPointerScaleBehavior","MultiPointerScaleBehavior","createModel","runRenderLoop","render","Layer","isBackground","init","resize"],"mappings":"8GAAA,uBAgHAA,OAAOC,iBAAiB,oBAAoB,YA9F/B,WACX,IAAMC,EAASC,SAASC,eAAe,UACjCC,EAAS,IAAIC,SAAOJ,GACtBK,EAAQ,IAAIC,QAAMH,GA6EtBE,EA3EoB,WAClBA,EAAME,WAAa,IAAIC,QAAQC,OAAO,EAAG,EAAG,EAAG,IAG/C,IAAMC,EAAY,IAAIC,YACpB,YACA,IAAIC,UAAQ,EAAG,GAAI,IAEnBC,KAAKC,GAAK,EACV,GACAT,GAEFK,EAAUK,UAAY,IACtBL,EAAUM,MAAQ,GAIlB,IAAMC,EAAmB,IAAIC,mBAC3B,mBACA,IAAIN,UAAQ,GAAI,EAAG,GACnBP,GAGFY,EAAiBF,UAAY,GAC7BE,EAAiBD,MAAQ,IACzBC,EAAiBE,QAAU,IAAIX,QAAQY,OAAO,GAAI,GAAI,IAItD,IAAMC,EAAS,IAAIC,aAAW,UAAW,IAAIV,UAAQ,EAAG,EAAG,GAAIP,GA2C/D,OA1CAgB,EAAOE,UAAU,IAAIX,UAAQY,MAG7BH,EAAOI,cAAcpB,GAAO,GAC5BgB,EAAOK,yBAA0B,EACjCL,EAAOM,iBAAkB,EACzBtB,EAAMuB,aAAaC,OAAShB,KAAKC,GAGnBgB,cAAYC,OACxB,uBACA,aACA1B,GACA,SAAU2B,GACR3B,EAAM4B,4BAA2B,GAAM,GAAM,GAC/B,IAAIC,mBAAiB,OAAQ,IAAItB,UAAQ,EAAG,EAAG,GAAIP,GAC3DU,UAAY,GAGlBiB,EAAUG,OAAO,GAAGC,QAAQC,aAAa,KAIzC,IAAMC,EAAWN,EAAUG,OAAO,GAG5BI,EACJ,IAAIC,mBAAiBC,oCAAoCH,GAGrDI,EAAY,IAAIC,uBAAqBtC,GAC3CqC,EAAUE,kBAAkBC,0BAA2B,EAC3C,IAAIL,mBAAiBpB,SAAO0B,cAAc,IAAKJ,GAA3D,IAGMK,EAAqB,IAAIC,qBAC/BT,EAAYU,YAAYF,GACxB,IAAMG,EAA4B,IAAIC,4BACtCZ,EAAYU,YAAYC,MAIrB7C,EAGD+C,GAERjD,EAAOkD,eAAc,WACnBhD,EAAMiD,YAKW,IAAIC,QAAM,OAD3B,8JACwClD,GAC/BmD,cAAe,EAEnBnD,EAAMiD,SAIbG,MAGF3D,OAAOC,iBAAiB,UAAU,WAChC,IAAMC,EAASC,SAASC,eAAe,UACxB,IAAIE,SAAOJ,GAAQ,GAC3B0D,c","file":"static/js/main.07edd1a9.chunk.js","sourcesContent":["import {\n  SceneLoader,\n  FreeCamera,\n  Vector3,\n  Color3,\n  Engine,\n  Scene,\n  HemisphericLight,\n  SpotLight,\n  Layer,\n  UtilityLayerRenderer,\n  BoundingBoxGizmo,\n  SixDofDragBehavior,\n  MultiPointerScaleBehavior,\n  DirectionalLight,\n} from \"babylonjs\"\nimport \"babylonjs-loaders\"\n\nconst init = () => {\n  const canvas = document.getElementById(\"canvas\")\n  const engine = new Engine(canvas)\n  let scene = new Scene(engine)\n\n  const createModel = () => {\n    scene.clearColor = new BABYLON.Color4(0, 0, 0, 0.2)\n\n    //Lights Hanlers\n    const spotLight = new SpotLight(\n      \"spotLight\",\n      new Vector3(0, 30, 10),\n\n      Math.PI / 3,\n      20,\n      scene\n    )\n    spotLight.intensity = 100\n    spotLight.range = 20\n  \n   \n\n    const directionalLight = new DirectionalLight(\n      \"DirectionalLight\",\n      new Vector3(0, -1, 0),\n      scene\n    )\n\n    directionalLight.intensity = 10\n    directionalLight.range = 100\n    directionalLight.diffuse = new BABYLON.Color3(90, 90, 76)\n\n    //Camera Handlers\n\n    const camera = new FreeCamera(\"camera1\", new Vector3(0, 1, 0), scene)\n    camera.setTarget(new Vector3.Zero())\n\n    // Attaching the controls to camera to enable rotation of the model rather than canvas\n    camera.attachControl(scene, true)\n    camera.useAutoRotationBehavior = true\n    camera.allowUpsideDown = true\n    scene.activeCamera.alpha += Math.PI\n\n    //Model setup importing .gltf model\n    const model = SceneLoader.Append(\n      \"../assets/daft_punk/\",\n      \"scene.gltf\",\n      scene,\n      function (newMeshes) {\n        scene.createDefaultCameraOrLight(true, true, true)\n        const light = new HemisphericLight(\"hemi\", new Vector3(0, 1, 0), scene)\n        light.intensity = 20\n\n        //Scales the Model\n        newMeshes.meshes[0].scaling.scaleInPlace(1.5)\n\n        //wrap in bounding box mesh to avoid picking perf hit\n\n        const gltfMesh = newMeshes.meshes[0]\n\n        //Encapsulates model in a box to enable grabbing\n        const boundingBox =\n          new BoundingBoxGizmo.MakeNotPickableAndWrapInBoundingBox(gltfMesh)\n\n        // Create bounding box gizmo\n        const utilLayer = new UtilityLayerRenderer(scene)\n        utilLayer.utilityLayerScene.autoClearDepthAndStencil = false\n        var gizmo = new BoundingBoxGizmo(Color3.FromHexString(\"\"), utilLayer)\n\n        // Create behaviors to drag and scale with pointers in VR\n        const sixDofDragBehavior = new SixDofDragBehavior()\n        boundingBox.addBehavior(sixDofDragBehavior)\n        const multiPointerScaleBehavior = new MultiPointerScaleBehavior()\n        boundingBox.addBehavior(multiPointerScaleBehavior)\n      }\n    )\n\n    return scene\n  }\n\n  scene = createModel()\n  // scene.debugLayer.show()\n  engine.runRenderLoop(function () {\n    scene.render()\n  })\n  //Set up background for canvas\n  const url =\n    \"https://images.unsplash.com/photo-1542879412-4309c2cade1d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1500&q=80\"\n  const background = new Layer(\"back\", url, scene)\n  background.isBackground = true\n\n  return scene.render()\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  init()\n})\n\nwindow.addEventListener(\"resize\", () => {\n  const canvas = document.getElementById(\"canvas\")\n  const engine = new Engine(canvas, true)\n  engine.resize()\n})\n"],"sourceRoot":""}